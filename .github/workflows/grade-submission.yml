name: Grade JSON Submission

on:
  pull_request:
    types: [opened, synchronize]
    paths: ['pipeline-exercise.json']

jobs:
  grade:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Grade submission
      id: grade
      run: |
        python system/runner.py --file pipeline-exercise.json --output results.json
        echo "score=$(python -c "import json; print(json.load(open('results.json'))['total_score'])")" >> $GITHUB_OUTPUT
        echo "passed=$(python -c "import json; print(json.load(open('results.json'))['passed'])")" >> $GITHUB_OUTPUT
    
    - name: Comment results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('results.json', 'utf8'));
          
          const emoji = results.passed ? '‚úÖ' : '‚ùå';
          const status = results.passed ? 'VALID√â' : 'NON VALID√â';
          
          const comment = `## ${emoji} R√©sultats - MODULE 4 IA & Donn√©es
          
          **Score: ${results.total_score}/20 (${results.percentage}%)**  
          **Status: ${status}** - Note: ${results.grade_letter}
          
          ### üìä D√©tail
          - **QCM**: ${results.qcm_score}/10 points
          - **Code**: ${results.code_score}/10 points
          
          ### üí¨ Feedback
          ${results.feedback}
          
          ### üìà Performance par cat√©gorie
          ${Object.entries(results.category_analysis || {})
            .map(([cat, data]) => `- **${cat}**: ${data.correct}/${data.total} (${data.percentage}%)`)
            .join('\n')}
          
          ---
          *Correction automatique - ${results.timestamp}*  
          *Les solutions seront r√©v√©l√©es en classe apr√®s l'exercice*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Set status check
      run: |
        if [ "${{ steps.grade.outputs.passed }}" == "True" ]; then
          echo "‚úÖ Exercice valid√©"
          exit 0
        else
          echo "‚ùå Score insuffisant (minimum 14/20)"
          exit 1
        fi