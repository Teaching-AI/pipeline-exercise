name: Auto-Grade Pipeline Exercise

on:
  pull_request:
    types: [opened, synchronize]
    paths: ['pipeline-schema.md']

jobs:
  grade-submission:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install pyyaml requests
    
    - name: Run grading tests
      id: grade
      run: |
        python grading/secure_grader.py --file pipeline-schema.md --output results.json
        echo "score=$(python -c "import json; print(json.load(open('results.json'))['total_score'])")" >> $GITHUB_OUTPUT
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('results.json', 'utf8'));
          
          const scoreEmoji = results.total_score >= 18 ? 'ü•á' : 
                           results.total_score >= 14 ? 'üëç' : 
                           results.total_score >= 10 ? 'üìö' : 'üîÑ';
          
          const comment = `## ${scoreEmoji} R√©sultats de l'auto-correction
          
          **Score total : ${results.total_score}/20 points**
          
          ### üìä D√©tail par section :
          ${results.sections.map(s => 
            `- **${s.name}** : ${s.score}/${s.max_score} points ${s.score === s.max_score ? '‚úÖ' : '‚ùå'}`
          ).join('\n')}
          
          ### üí¨ Feedback :
          ${results.feedback}
          
          ### üí° Recommandations :
          ${results.recommendations.map(r => `- ${r}`).join('\n')}
          
          ---
          *Correction automatique s√©curis√©e - Temps d'ex√©cution: ${new Date().toLocaleTimeString()}*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Set status check
      run: |
        if [ "${{ steps.grade.outputs.score }}" -ge "14" ]; then
          echo "‚úÖ Exercice valid√© (${{ steps.grade.outputs.score }}/20)"
          exit 0
        else
          echo "‚ùå Score insuffisant (${{ steps.grade.outputs.score }}/20) - Minimum requis: 14/20"
          exit 1
        fi